{"ast":null,"code":"import _regeneratorRuntime from\"/home/jenn/Documents/projects/ReactPokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jenn/Documents/projects/ReactPokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/jenn/Documents/projects/ReactPokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Descpokecard=function Descpokecard(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),pokedesc=_useState2[0],setPokedesc=_useState2[1];var entry=\"Couldn't load information on this pokémon, sorry!\";var getDesc=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url){var response,desc;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(props.url);case 2:response=_context.sent;_context.next=5;return response.json();case 5:desc=_context.sent;return _context.abrupt(\"return\",desc);case 7:case\"end\":return _context.stop();}}},_callee);}));return function getDesc(_x){return _ref.apply(this,arguments);};}();useEffect(function(){getDesc(props.url).then(function(result){return setPokedesc(result);});},[props.url]);var switchEntry=function switchEntry(){if(pokedesc.flavor_text_entries[0].language.name===\"en\"){entry=pokedesc.flavor_text_entries[0].flavor_text;}else if(pokedesc.flavor_text_entries[1].language.name===\"en\"){entry=pokedesc.flavor_text_entries[1].flavor_text;}else if(pokedesc.flavor_text_entries[2].language.name===\"en\"){entry=pokedesc.flavor_text_entries[2].flavor_text;}else if(pokedesc.flavor_text_entries[3].language.name===\"en\"){entry=pokedesc.flavor_text_entries[3].flavor_text;}else if(pokedesc.flavor_text_entries[4].language.name===\"en\"){entry=pokedesc.flavor_text_entries[4].flavor_text;}else if(pokedesc.flavor_text_entries[5].language.name===\"en\"){entry=pokedesc.flavor_text_entries[5].flavor_text;}else if(pokedesc.flavor_text_entries[6].language.name===\"en\"){entry=pokedesc.flavor_text_entries[6].flavor_text;}else if(pokedesc.flavor_text_entries[7].language.name===\"en\"){entry=pokedesc.flavor_text_entries[7].flavor_text;}else if(pokedesc.flavor_text_entries[8].language.name===\"en\"){entry=pokedesc.flavor_text_entries[8].flavor_text;}else if(pokedesc.flavor_text_entries[9].language.name===\"en\"){entry=pokedesc.flavor_text_entries[9].flavor_text;}return entry;};return/*#__PURE__*/_jsx(_Fragment,{children:pokedesc.flavor_text_entries?/*#__PURE__*/_jsx(\"p\",{className:\"card-text left\",children:switchEntry().replaceAll(\"\f\",\" \")}):/*#__PURE__*/_jsx(\"p\",{children:\"Couldn't load information on this pok\\xE9mon, sorry!\"})});};export default Descpokecard;","map":{"version":3,"sources":["/home/jenn/Documents/projects/ReactPokedex/src/Components/ListPokemon/Descpokecard.js"],"names":["useState","useEffect","Descpokecard","props","pokedesc","setPokedesc","entry","getDesc","url","fetch","response","json","desc","then","result","switchEntry","flavor_text_entries","language","name","flavor_text","replaceAll"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst Descpokecard = (props) => {\n  const [pokedesc, setPokedesc] = useState([]);\n  let entry = \"Couldn't load information on this pokémon, sorry!\";\n\n  const getDesc = async (url) => {\n    const response = await fetch(props.url);\n    const desc = await response.json();\n    return desc;\n  };\n\n  useEffect(() => {\n    getDesc(props.url).then((result) => setPokedesc(result));\n  }, [props.url]);\n\n  const switchEntry = () => { \n    if (pokedesc.flavor_text_entries[0].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[0].flavor_text;\n    } else if (pokedesc.flavor_text_entries[1].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[1].flavor_text;\n    } else if (pokedesc.flavor_text_entries[2].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[2].flavor_text;\n    } else if (pokedesc.flavor_text_entries[3].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[3].flavor_text;\n    } else if (pokedesc.flavor_text_entries[4].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[4].flavor_text;\n    } else if (pokedesc.flavor_text_entries[5].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[5].flavor_text;\n    } else if (pokedesc.flavor_text_entries[6].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[6].flavor_text;\n    } else if (pokedesc.flavor_text_entries[7].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[7].flavor_text;\n    } else if (pokedesc.flavor_text_entries[8].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[8].flavor_text;\n    } else if (pokedesc.flavor_text_entries[9].language.name === \"en\") {\n      entry = pokedesc.flavor_text_entries[9].flavor_text;\n    }\n    return entry;\n  }\n\n  return (\n    <>\n      {pokedesc.flavor_text_entries ? (\n        <p className=\"card-text left\">\n          {switchEntry().replaceAll(\"\f\", \" \")}\n        </p>\n      ) : (\n        <p>Couldn't load information on this pokémon, sorry!</p>\n      )}\n    </>\n  );\n};\n\nexport default Descpokecard;\n"]},"metadata":{},"sourceType":"module"}